<?xml version="1.0" encoding="ISO-8859-1"?> 
<beans xmlns="http://www.springframework.org/schema/beans" 
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
       xmlns:context="http://www.springframework.org/schema/context" 
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:util="http://www.springframework.org/schema/util"
       xsi:schemaLocation="http://www.springframework.org/schema/beans 
             http://www.springframework.org/schema/beans/spring-beans-3.0.xsd 
             http://www.springframework.org/schema/context 
             http://www.springframework.org/schema/context/spring-context-3.0.xsd 
             http://www.springframework.org/schema/tx
             http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
             http://www.springframework.org/schema/util
             http://www.springframework.org/schema/util/spring-util-3.0.xsd">


    <!--bean id="JournalService"   class="service.JournalService" />
	<bean id="PaperService"   class="service.PaperService" /-->

    <context:component-scan base-package="dao.impl" />

	<bean id="JournalService" class="service.JournalService">
        <property name="journalDAO" ref="journalDAOImpl" />
	</bean>

	<bean id="PaperService" class="service.PaperService">
        <property name="journalDAO" ref="journalDAOImpl" />
        <property name="paperDAO" ref="paperDAOImpl" />
	</bean>

	<bean id="journalDAOImpl" class="dao.controle.FabricaDeDao" factory-method="getDao">
		<constructor-arg value="dao.impl.JournalDAOImpl" />
    </bean>
    
	<bean id="paperDAOImpl" class="dao.controle.FabricaDeDao" factory-method="getDao">
		<constructor-arg value="dao.impl.PaperDAOImpl" />
    </bean>

<!--  
    Acrescentando  o  elemento  abaixo  será  registrado  automaticamente  um bean  do tipo 
    PersistenceAnnotationBeanPostProcessor   que  ficará   responsável   por   injetar   um 
    EntityManager diferente, a cada  nova transação, nas  classes do  tipo DAO que utilizam
    a anotação @PersistenceContext.
-->
    <context:annotation-config />
   
<!--  
    Aqui  é  preciso  declarar  uma  JpaTransactionManager  e  habilitar o gerenciamento de 
    transação de forma declarativa com os elementos abaixo.
 -->
    <tx:annotation-driven />
    
    <bean id="transactionManager"
        class="org.springframework.orm.jpa.JpaTransactionManager">
        <property name="entityManagerFactory" ref="entityManagerFactory" />
    </bean>

<!-- 
    Spring  provê  um  fábrica denominada  LocalContainerEntityManagerFactoryBean, para que 
    se possa criar um objeto entity manager factory no container IoC. É preciso especificar 
    o  nome da  unidade de  persistência  definida no  arquivo de  configuração  da JPA,  o 
    datasource que será utilizado e o dialeto SQL a ser utilizado.

    Os dois elementos property abaixo foram  adicionados ao  elemento  entityManagerFactory   
    para  podermos  retirar  do  persistence.xml  as  configurações   de  configuração   do 
    datasource.
-->

    <bean id="entityManagerFactory"
          class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
        <property name="persistenceUnitName" value="producao" />
        <property name="packagesToScan" value="models" />
		<property name="dataSource" ref="dataSource" />
		<property name="jpaVendorAdapter">
			<bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter">
				<property name="databasePlatform" value="org.hibernate.dialect.PostgreSQLDialect" />			
				<property name="showSql" value="true" />
			</bean>
		</property>
    </bean>

    <bean id="dataSource" 
          class="org.springframework.jdbc.datasource.DriverManagerDataSource">
        <property name="driverClassName" value="org.postgresql.Driver" />
        <property name="url" value="jdbc:postgresql://localhost:5432/journal-paper-final" />
        <property name="username" value="scc2" />
        <property name="password" value="scc2" />
    </bean>
<!-- 
    Exception translation is still enabled by the use of the @Repository annotation on the DAO. 
    This annotation  enables a Spring  bean postprocessor to  advice all @Repository beans with 
    all the PersistenceExceptionTranslator  instances  found  in  the  Container  - and provide 
    exception translation just as before.
 -->
    <bean id="persistenceExceptionTranslationPostProcessor"
          class="org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor" />

</beans>
